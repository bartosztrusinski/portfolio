<p
  id='toast'
  class='fixed bottom-0 right-0 m-4 hidden min-h-[3.125rem] w-96 rounded border border-slate-200 bg-slate-50 px-6 py-3 font-semibold shadow-lg'>
</p>
<form action='https://api.web3forms.com/submit' method='POST' class='flow'>
  <div class='flex flex-col gap-4 sm:flex-row'>
    <div class='flex grow flex-col gap-1'>
      <label for='name'>Name</label>
      <input
        type='text'
        id='name'
        name='name'
        autocomplete='name'
        placeholder='John Doe'
        class='rounded-sm px-2 py-1'
        required
      />
    </div>
    <div class='flex grow flex-col gap-1'>
      <label for='email'>Email address</label>
      <input
        type='email'
        id='email'
        name='email'
        autocomplete='email'
        placeholder='john@doe.com'
        class='rounded-sm px-2 py-1'
        required
      />
    </div>
  </div>

  <div class='flex grow flex-col gap-1'>
    <label for='message'>Message</label>
    <textarea
      id='message'
      name='message'
      rows='3'
      maxlength='500'
      class='min-h-24 rounded-sm px-2 py-1'
      style='field-sizing: content;'
      required></textarea>
  </div>

  {/* Access Key */}
  <input type='hidden' name='access_key' value='53c17700-c53f-4dee-b0b4-83cc7ee7d51c' />

  {/* Honeypot Spam Protection */}
  <input type='checkbox' name='botcheck' class='hidden' />

  {/* Email subject */}
  <input type='hidden' name='subject' value='Portfolio Contact Message' />

  <button
    type='submit'
    class='ms-auto block w-full min-w-36 rounded bg-primary px-4 py-2 font-semibold disabled:cursor-not-allowed disabled:opacity-50 sm:w-max'>
    Send message
  </button>
</form>

<script>
  const toastEl = document.querySelector('#toast') as HTMLElement;
  const form = document.querySelector('form')!;
  const buttonEl = form.querySelector('button')!;

  type ButtonState = 'default' | 'loading';
  type ButtonStateValues = {
    text: string;
    disabled: boolean;
  };

  class Button {
    private btn: HTMLButtonElement;
    private stateValues: Record<ButtonState, ButtonStateValues> = {
      default: {
        text: 'Submit',
        disabled: false,
      },
      loading: {
        text: 'Loading...',
        disabled: true,
      },
    };

    constructor(btn: HTMLButtonElement, loadingText?: string) {
      this.btn = btn;
      this.stateValues.default.text = this.btn.textContent ?? this.stateValues.default.text;
      this.stateValues.loading.text = loadingText ?? this.stateValues.loading.text;

      console.log(this.stateValues);
    }

    private set text(value: string) {
      this.btn.textContent = value;
    }

    private disable() {
      this.btn.setAttribute('disabled', 'true');
    }

    private enable() {
      this.btn.removeAttribute('disabled');
    }

    setState(state: ButtonState) {
      const newState = this.stateValues[state];
      this.text = newState.text;
      newState.disabled ? this.disable() : this.enable();
    }
  }

  type ToastType = 'success' | 'error' | 'default';
  type ToastTypeValues = {
    classes: string;
  };

  class Toast extends Function {
    private toast: HTMLElement;
    private timeoutId: number = 0;
    private displayDurationMs = 5000;
    private TYPE_VALUES: Record<ToastType, ToastTypeValues> = {
      default: {
        classes: 'text-slate-600',
      },
      success: {
        classes: 'text-green-500',
      },
      error: {
        classes: 'text-red-500',
      },
    };

    constructor(toast: HTMLElement) {
      super('...args', 'return this.showToast(...args)');
      this.toast = toast;
      return new Proxy(this, {
        apply: (target, _, args: Parameters<typeof this.showToast>) => {
          return target.showToast(args[0]);
        },
      });
    }

    private set message(value: string) {
      this.toast.textContent = value;
    }

    private set hidden(value: boolean) {
      this.toast.classList.toggle('hidden', value);
    }

    private removeTypeClasses() {
      const allTypeClasses = Object.values(this.TYPE_VALUES)
        .map((type) => type.classes)
        .filter(Boolean);
      this.toast.classList.remove(...allTypeClasses);
    }

    private showToast(message: string, type: ToastType = 'default') {
      const typeValues = this.TYPE_VALUES[type];
      window.clearTimeout(this.timeoutId);

      this.message = message;
      this.hidden = false;
      this.removeTypeClasses();
      this.toast.classList.add(typeValues.classes);
      this.timeoutId = window.setTimeout(() => (this.hidden = true), this.displayDurationMs);
    }

    success(message: string) {
      return this.showToast(message, 'success');
    }

    error(message: string) {
      return this.showToast(message, 'error');
    }
  }

  const button = new Button(buttonEl, 'Sending...');
  const toast = new Toast(toastEl);

  form.addEventListener('submit', async (event) => {
    event.preventDefault();

    toast('Sending message, please wait...');
    button.setState('loading');

    const formData = new FormData(form);
    const data = Object.fromEntries(formData);
    const serializedData = JSON.stringify(data);

    try {
      const response = await fetch(form.action, {
        method: form.method,
        headers: {
          'Content-Type': 'application/json',
          Accept: 'application/json',
        },
        body: serializedData,
      });

      const data = await response.json();

      if (response.status !== 200) {
        console.log(data?.message);
      }

      toast.success('Message sent successfully!');
      form.reset();
    } catch (error) {
      console.error(error);
      toast.error('Something went wrong, please try again.');
    } finally {
      button.setState('default');
    }
  });
</script>
